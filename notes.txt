todo

-  to change the regex to work with parenthese. e.g. 
Zn(H_2PO_4)_2 => ["Zn","(","H","_2","P","O","_4", ")","_2"]

-  in this. what i want to do is this part. Math.abs(splitInput(input.value) ? splitInput(input.value).length - 1 : splitInput(input.value))
   is just for initial. i will change that value with some condition from other function like this 
   const moveCursor = (index, event) => {
   	cursorIndex.value = index;
   };




   <template>
	<div>
		<div class="text-center">
			<h3 class="title">Write the formula for:</h3>
			<div class="name text-pink-600">{{ formulaInfo.name }}</div>
		</div>
		<div class="space-y-6 mt-10">
			<div>
				<label for="input" class="label">Your Answer:</label>
				<div class="border text-start border-1 border-zinc-400 px-6 md:text-lg text-base py-4 rounded-md">
					{{ input }} <br />
					{{ splitInput(input) }}
					<div v-if="input" class="flex items-center tracking-wide">
						<div
							v-for="(char, index) in splitInput(input)"
							:key="index"
							v-html="diaplayFormat(char)"
							:class="{
								'cursor-active': cursorIndex === index,
								'cursor-right': isRightSideCursor,
								'cursor-left': !isRightSideCursor,
							}"
							@click="(event) => moveCursor(index, event)"></div>
					</div>
					<div v-else class="text-gray-400">Enter the formula of the compound</div>
				</div>
			</div>

			<onScreenKeyboard @keyClick="processKeyboardInput" @deleteClick="processKeyboardInput('delete')" />

			<div class="flex space-x-4">
				<button class="btn submit" @click="checkAnswer()" :disabled="isDisabled">Check Answer</button>
				<button
					class="btn skip"
					type="button"
					@click="
						generate();
						store.commit('updateScore', { isSkipped: true });
					"
					:disabled="isDisabled">
					<SkipForwardIcon class="mr-2 h-5 w-5" />
					Skip Question
				</button>
			</div>
		</div>
	</div>
</template>

<script setup>
import { ref, computed, watch } from "vue";
import { generateFormulaAndName, getRandomName } from "../utils/formulaHelper.js";
import { SkipForwardIcon } from "lucide-vue-next";
import { useStore } from "vuex";
import onScreenKeyboard from "@/components/onScreenKeyboard.vue";

const store = useStore();
store.commit("changeMode", "writing");

let formulaInfo = ref({ formula: "", name: "" }); // to access from template
const isFirstTime = ref(true);
const input = ref("");
// const input = ref("AgNO_3");
// const input = ref("K_3Cl_2");
const currentData = computed(() => store.state.currentData.writing);
const isDisabled = ref(false); // to add disabled after submit

const checkAnswer = () => {
	isDisabled.value = true;
	const inputValue = input.value;

	if (!inputValue) {
		store.commit("changeAlertStatus", {
			isData: true,
			message: "Please enter the formula of the compound.",
		});
		setTimeout(() => {
			isDisabled.value = false;
		}, 3000);
		return;
	}

	if (inputValue === formulaInfo.value.formula) {
		store.commit("changeAlertStatus", { isData: true, isCorrect: true, message: "Correct!" });
		store.commit("updateScore", { isCorrect: true });
		regenerate();
	} else {
		store.commit("changeAlertStatus", {
			isData: true,
			isCorrect: false,
			message: `Oops! That's not quite right. The correct answer is ${formulaInfo.value.formula}.`,
			isFormula: true,
			timeout: 5000,
		});
		store.commit("updateScore", { isCorrect: false });
		regenerate(5000);
	}
};

const formulaAnimation = () => {
	const originalName = formulaInfo.value.name;
	let counter = 0;
	const maxIterations = 6;
	let startTime = null;

	const animate = (timestamp) => {
		if (!startTime) startTime = timestamp;
		const progress = timestamp - startTime;

		if (counter < maxIterations) {
			formulaInfo.value.name = getRandomName();

			counter = Math.floor(progress / 50);

			requestAnimationFrame(animate);
		} else {
			formulaInfo.value.name = originalName;
		}
	};

	requestAnimationFrame(animate);
};

const setFormulaAndCommit = (newFormula) => {
	formulaInfo.value = newFormula;
	store.commit("changeCurrentData", formulaInfo.value);
};

const generate = () => {
	if (isFirstTime.value) {
		if (!currentData.value) {
			const generatedFormula = generateFormulaAndName();
			isFirstTime.value = false;
			setFormulaAndCommit(generatedFormula);
			return;
		}

		formulaInfo.value = currentData.value;
		isFirstTime.value = false;
		return;
	}

	isFirstTime.value = false;
	const oldFormulaAndName = formulaInfo.value; // Pass the old formula to avoid generating a duplicate in generateFormulaAndName.
	const generatedFormula = generateFormulaAndName(oldFormulaAndName);
	setFormulaAndCommit(generatedFormula);
	formulaAnimation();
};
generate();

const regenerate = (timeout = 3000) => {
	setTimeout(() => {
		input.value = "";
		generate();
		isDisabled.value = false;
	}, timeout);
};

const processKeyboardInput = (key) => {
	console.log("");
	let inputArr = splitInput(input.value);
	let splitIndex = cursorIndex.value;
	let element = inputArr ? inputArr[splitIndex] : "";

	console.log("cursorIndex: " + cursorIndex.value);
	console.log("inputArr:" + inputArr);
	console.log("splitIndex:" + splitIndex);

	if (!isNaN(key)) {
		key = `_${key}`;
	}

	if (!inputArr.length) {
		input.value = key;
		cursorIndex.value++;

		console.log(cursorIndex.value);
		return;
	}

	inputArr[splitIndex] = key;
	input.value = inputArr.join("");
	cursorIndex.value++;

	// inputArr[splitIndex] = isRightSideCursor.value ? element + key : key + element;
	// input.value = inputArr.join("");
	// cursorIndex.value++;

	// inputArr[splitIndex] = isRightSideCursor.value ? element + key : key + element;
	// input.value = inputArr.join("");
	// cursorIndex.value++;

	// if (!inputArr) {
	// 	if (key == "delete") return;

	// 	input.value = key;

	// 	cursorIndex.value++;
	// 	return;
	// }

	// if (key == "delete") {
	// 	if (splitIndex == 0 && !isRightSideCursor.value) return console.log("returned");

	// 	inputArr[splitIndex] = "";
	// 	input.value = inputArr.join("");
	// 	cursorIndex.value--;

	// 	// console.log("");
	// 	// console.log("cursorIndex: " + cursorIndex.value);
	// 	return;
	// }

	// inputArr[splitIndex] = (() => {
	// 	if (isRightSideCursor.value && splitIndex != 0) {
	// 		console.log("");
	// 		console.log(element + key);
	// 		return element + key;
	// 	} else {
	// 		console.log("");
	// 		console.log(key + element);
	// 		return key + element;
	// 	}
	// })();

	// input.value = inputArr.join("");
	// cursorIndex.value++;

	// console.log(splitIndex);
};

const splitInput = (text) => (text ? text.match(/[A-Z][a-z]?|\(\)|\(|\)|_\d+/g) : "");
// const setCursorIndex = (value) => (cursorIndex.value = Math.abs(value));
const cursorIndex = ref(Math.abs(splitInput(input.value) ? splitInput(input.value).length - 1 : splitInput(input.value)));

const isRightSideCursor = ref(true);

const moveCursor = (index, event) => {
	const elementWidth = event.target.offsetWidth;
	const clickPosition = event.offsetX;

	isRightSideCursor.value = clickPosition > elementWidth / 2;
	cursorIndex.value = index;
};

const sliceString = (value) => (input.value = input.value.slice(0, value));
const isUpperCase = (str) => str === str.toUpperCase();
const diaplayFormat = (text) => (/^_\d+$/.test(text) ? `<sub>${text.slice(1)}</sub>` : text);
</script>

<style scoped>
.cursor-active {
	@apply relative;
}

.cursor-active::after {
	content: "";
	@apply absolute top-0 h-5 w-[1px] animate-blink bg-red-500;
}

.cursor-left.cursor-active:after {
	@apply left-0;
}

.cursor-right.cursor-active:after {
	@apply right-0;
}

.animate-blink {
	animation: blink 1.5s steps(2) infinite;
}

@keyframes blink {
	0% {
		opacity: 0;
	}
}
</style>
